<template>
	<list class="movie-list" onscrollbottom="loadMore">
        <block for="movieList">
            <list-item type="movie" class="movie-item">
				<div class="cover">
					<image class="img" src="{{$item.images.medium}}"></image>
				</div>
				<div class="content">
					<text>片名：{{$item.title}}</text>
					<text>导演：{{$item.directors[0].name}}</text>
					<text>分类：{{formatGenres($item.genres)}}</text>
					<text>主演：{{formatCasts($item.casts)}}</text>
					<text>评分：{{$item.rating.average}}</text>
				</div>
            </list-item>
        </block>
		
        <list-item type="loadStatus" class="load-more">
            <progress type="circular" show="{{hasMoreData}}"></progress>
            <text show="{{hasMoreData}}">加载更多</text>
            <text show="{{!hasMoreData}}">没有更多了~</text>
        </list-item>
    </list>
</template>

<style>
	.movie-list {
		width: 100%;
	}
	.movie-item {
        border-radius: 10px;
        flex-direction: row;
        margin: 15px;
        padding: 15px;
        background-color: #ffffff;
    }

    .movie-item .title {
        width: 100%;
        color: #000000;
		margin-left: 15px;
    }
	.movie-item .cover {
		flex: 1;
	}
    .movie-item .cover image {
		resize-mode : cover;
		width: 100%;
		height: 100%;
    }
	
	.movie-item .content {
		flex: 2;
		flex-direction: column;
		justify-content: center;
		margin-left: 20px;
	}
	
	.movie-item .content >text {
		padding: 8px;
	}
	
	.load-more {
        justify-content: center;
        padding: 20px;
    }
</style>

<script>
	import fetch from '@system.fetch'
	export default {
		props : [
			'classify'
		],
		data : {
			movieList: [],
            hasMoreData: true,
            isLoadingData: false,
            curPage: 0,
			pageSize: 10
		},
		onInit() {
			this.loadMovieData();
		},
		loadMore() {
			this.curPage++;
			this.loadMovieData();
		},
		loadMovieData() {
			var _this = this;
			var url = 'https://api.douban.com/v2/movie/' + _this.classify + '?start=' + _this.curPage * _this.pageSize + '&' + 'count=' + _this.pageSize;
			fetch.fetch({
                url: url,
                success: function (response) {
                    var data = JSON.parse(response.data);
					console.log(JSON.stringify(data.subjects));
                    if (!data || !data.subjects || data.subjects.length <= 0) {
                        _this.hasMoreData = false;
                    } else {
                        _this.movieList = _this.movieList.concat(data.subjects);
                    }
                },
                fail: function (data, code) {
                    console.log("=== error: " + code);
                }
            });
		},
		formatGenres(genres) {
			var genresString = '';
			if (genres && genres.length > 0) {
				for (var i = 0; i < genres.length; i++) {
					genresString += genres[i] + ",";
				}
				genresString = genresString.substring(0, genresString.length - 1);
			}
			return genresString;
		},
		formatCasts(casts) {
			var castsString = '';
			if (casts && casts.length > 0) {
				for (var i = 0; i < casts.length; i++) {
					castsString += casts[i].name + ",";
				}
				castsString = castsString.substring(0, castsString.length - 1);
			}
			return castsString;
		}
	}
</script>